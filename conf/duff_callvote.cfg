
/* Advanced callvote and referee commands
 *
 * Use "/set sv_vote callvote.txt" and/or "/set sv_referee callvote.txt" to
 * enable this file.
 **/

config, conf {
	// first argument
	1 {
		// little helper, when using "/callvote config" it will show
		// something like "usage: /callvote config <fileName>"
		// instead of "usage: /callvote config <*>"
		argument = "fileName";
		
		// any argument
		* {
			// "load" is special, it will only pass if the config is
			// available/exists on the server
			command = "load $";
		}
	}
	
	description = "Loads a custom gameplay config.";
}
restart, map_restart {
	// no arguments
	command = "map_restart";
	
	description = "Restarts the current map.";
}
nextmap, rotate {
	command = "rotate";
	
	description = "Forces the next map in server rotation to load.";
}
gametype, g_gametype {
	1 {
		ffa, deathmatch, 0 {
			command = "set g_gametype 0";
		}
		
		duel, tourney, tournament, 1 {
			command = "set g_gametype 1";
		}
		tdm, team, 3 {
			command = "set g_gametype 3";
		}
		ctf, capture, 4 {
			command = "set g_gametype 4";
		}
		rtf, return, returnflag, 5 {
			command = "set g_gametype 5";
		}
		onectf, 1ctf, 1flag, 1fctf, oneflag, 1flagctf, oneflagctf, 6 {
			command = "set g_gametype 6";
		}
		ca, clan, arena, clanarena, 7 {
			command = "set g_gametype 7";
		}
		
		freeze, tag, ftag, freezetag, 8 {
			command = "set g_gametype 8";
		}
		
		ptl, protect, leader, protectleader, 9 {
			command = "set g_gametype 9";
		}
	}
	// second argument (which level) is optional
	2 {
		argument = "mapName";
		empty {
			command .= "; map_restart 0";
		}
		* {
			// "map" command is special, it will only pass if the map is
			// available/exists on the server
			command .= "; map $";
		}
	}
}
map {
	1 {
		argument = "mapName";
		* {
			// "map" command is special, it will only pass if the map is
			// available/exists on the server
			command = "map $";
		}
	}
}
if ( $g_gametype >= GT_TEAM ) {
	teamBalance {
		1 {
			empty,
			FPH, 1 {
				command = "teamBalance 1";
			}
			score, 2 {
				command = "teamBalance 2";
			}
		}
		description = "Balance the teams on the fly, without resetting the game score.";
	}
}
timelimit {
	1 {
		// referee is god, while mere mortals are limited to a range between 5 and 20
		REF *,
		0..60 {
			command = "set timelimit $";
		}
	}
}
if ( in($g_gametype, GT_CTF, GT_RTF, GT_ONEFLAG) ) {
	capturelimit {
		1 {
			REF *,
			5..50 {
				command = "set roundlimit 0; set capturelimit $";
			}
		}
	}
}
else {
	fraglimit {
		1 {
			REF *,
			5..100 {
				command = "set roundlimit 0; set fraglimit $";
			}
		}
	}
}
roundlimit {
	1 {
		REF *,
		0..100 {
			command = "set roundlimit $";
		}
	}
}
physics, sv_physics {
	1 {
		baseq3 {
			command = "set sv_physics 0";
		}
		
		bunnyhop, +bunnyhop {
			command = "set sv_physics ". ( $sv_physics | PHYSICS_CONTROL_FORWARD | PHYSICS_CONTROL_SIDEWARD | PHYSICS_CONTROL_STOP );
		}
		-bunnyhop {
			command = "set sv_physics ". ( $sv_physics & ~(PHYSICS_CONTROL_FORWARD | PHYSICS_CONTROL_SIDEWARD | PHYSICS_CONTROL_STOP) );
		}
		
		// referee can set any value
		REF * {
			command = "set sv_physics $";
		}
	}
	
	description = "Changes the movement physics.";
}